# coding: utf-8

"""
    Onfido Public API v3.6

    The Onfido Public API (v3.6)

    The version of the OpenAPI document: v3.6
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from onfido.models.document_breakdown_data_comparison_breakdown_issuing_country import DocumentBreakdownDataComparisonBreakdownIssuingCountry
from typing import Optional, Set
from typing_extensions import Self

class UsDrivingLicenceBreakdownPersonalBreakdown(BaseModel):
    """
    UsDrivingLicenceBreakdownPersonalBreakdown
    """ # noqa: E501
    first_name: Optional[DocumentBreakdownDataComparisonBreakdownIssuingCountry] = None
    name_suffix: Optional[DocumentBreakdownDataComparisonBreakdownIssuingCountry] = None
    height: Optional[DocumentBreakdownDataComparisonBreakdownIssuingCountry] = None
    weight: Optional[DocumentBreakdownDataComparisonBreakdownIssuingCountry] = None
    sex_code: Optional[DocumentBreakdownDataComparisonBreakdownIssuingCountry] = None
    eye_color: Optional[DocumentBreakdownDataComparisonBreakdownIssuingCountry] = None
    date_of_birth: Optional[DocumentBreakdownDataComparisonBreakdownIssuingCountry] = None
    last_name: Optional[DocumentBreakdownDataComparisonBreakdownIssuingCountry] = None
    middle_name: Optional[DocumentBreakdownDataComparisonBreakdownIssuingCountry] = None
    first_name_fuzzy: Optional[DocumentBreakdownDataComparisonBreakdownIssuingCountry] = None
    middle_name_fuzzy: Optional[DocumentBreakdownDataComparisonBreakdownIssuingCountry] = None
    last_name_fuzzy: Optional[DocumentBreakdownDataComparisonBreakdownIssuingCountry] = None
    middle_initial: Optional[DocumentBreakdownDataComparisonBreakdownIssuingCountry] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["first_name", "name_suffix", "height", "weight", "sex_code", "eye_color", "date_of_birth", "last_name", "middle_name", "first_name_fuzzy", "middle_name_fuzzy", "last_name_fuzzy", "middle_initial"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UsDrivingLicenceBreakdownPersonalBreakdown from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of first_name
        if self.first_name:
            _dict['first_name'] = self.first_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of name_suffix
        if self.name_suffix:
            _dict['name_suffix'] = self.name_suffix.to_dict()
        # override the default output from pydantic by calling `to_dict()` of height
        if self.height:
            _dict['height'] = self.height.to_dict()
        # override the default output from pydantic by calling `to_dict()` of weight
        if self.weight:
            _dict['weight'] = self.weight.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sex_code
        if self.sex_code:
            _dict['sex_code'] = self.sex_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of eye_color
        if self.eye_color:
            _dict['eye_color'] = self.eye_color.to_dict()
        # override the default output from pydantic by calling `to_dict()` of date_of_birth
        if self.date_of_birth:
            _dict['date_of_birth'] = self.date_of_birth.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_name
        if self.last_name:
            _dict['last_name'] = self.last_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of middle_name
        if self.middle_name:
            _dict['middle_name'] = self.middle_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of first_name_fuzzy
        if self.first_name_fuzzy:
            _dict['first_name_fuzzy'] = self.first_name_fuzzy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of middle_name_fuzzy
        if self.middle_name_fuzzy:
            _dict['middle_name_fuzzy'] = self.middle_name_fuzzy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_name_fuzzy
        if self.last_name_fuzzy:
            _dict['last_name_fuzzy'] = self.last_name_fuzzy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of middle_initial
        if self.middle_initial:
            _dict['middle_initial'] = self.middle_initial.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UsDrivingLicenceBreakdownPersonalBreakdown from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "first_name": DocumentBreakdownDataComparisonBreakdownIssuingCountry.from_dict(obj["first_name"]) if obj.get("first_name") is not None else None,
            "name_suffix": DocumentBreakdownDataComparisonBreakdownIssuingCountry.from_dict(obj["name_suffix"]) if obj.get("name_suffix") is not None else None,
            "height": DocumentBreakdownDataComparisonBreakdownIssuingCountry.from_dict(obj["height"]) if obj.get("height") is not None else None,
            "weight": DocumentBreakdownDataComparisonBreakdownIssuingCountry.from_dict(obj["weight"]) if obj.get("weight") is not None else None,
            "sex_code": DocumentBreakdownDataComparisonBreakdownIssuingCountry.from_dict(obj["sex_code"]) if obj.get("sex_code") is not None else None,
            "eye_color": DocumentBreakdownDataComparisonBreakdownIssuingCountry.from_dict(obj["eye_color"]) if obj.get("eye_color") is not None else None,
            "date_of_birth": DocumentBreakdownDataComparisonBreakdownIssuingCountry.from_dict(obj["date_of_birth"]) if obj.get("date_of_birth") is not None else None,
            "last_name": DocumentBreakdownDataComparisonBreakdownIssuingCountry.from_dict(obj["last_name"]) if obj.get("last_name") is not None else None,
            "middle_name": DocumentBreakdownDataComparisonBreakdownIssuingCountry.from_dict(obj["middle_name"]) if obj.get("middle_name") is not None else None,
            "first_name_fuzzy": DocumentBreakdownDataComparisonBreakdownIssuingCountry.from_dict(obj["first_name_fuzzy"]) if obj.get("first_name_fuzzy") is not None else None,
            "middle_name_fuzzy": DocumentBreakdownDataComparisonBreakdownIssuingCountry.from_dict(obj["middle_name_fuzzy"]) if obj.get("middle_name_fuzzy") is not None else None,
            "last_name_fuzzy": DocumentBreakdownDataComparisonBreakdownIssuingCountry.from_dict(obj["last_name_fuzzy"]) if obj.get("last_name_fuzzy") is not None else None,
            "middle_initial": DocumentBreakdownDataComparisonBreakdownIssuingCountry.from_dict(obj["middle_initial"]) if obj.get("middle_initial") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


