# coding: utf-8

"""
    Onfido Public API v3.6

    The Onfido Public API (v3.6)

    The version of the OpenAPI document: v3.6
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from onfido.models.identity_enhanced_breakdown_address import IdentityEnhancedBreakdownAddress
from onfido.models.identity_enhanced_breakdown_date_of_birth import IdentityEnhancedBreakdownDateOfBirth
from onfido.models.identity_enhanced_breakdown_mortality import IdentityEnhancedBreakdownMortality
from onfido.models.identity_enhanced_breakdown_sources import IdentityEnhancedBreakdownSources
from onfido.models.idr_ssn_breakdown import IdrSsnBreakdown
from typing import Optional, Set
from typing_extensions import Self

class IdentityEnhancedBreakdown(BaseModel):
    """
    IdentityEnhancedBreakdown
    """ # noqa: E501
    sources: Optional[IdentityEnhancedBreakdownSources] = None
    address: Optional[IdentityEnhancedBreakdownAddress] = None
    date_of_birth: Optional[IdentityEnhancedBreakdownDateOfBirth] = None
    mortality: Optional[IdentityEnhancedBreakdownMortality] = None
    ssn: Optional[IdrSsnBreakdown] = None
    ssn1: Optional[IdrSsnBreakdown] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["sources", "address", "date_of_birth", "mortality", "ssn", "ssn1"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IdentityEnhancedBreakdown from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of sources
        if self.sources:
            _dict['sources'] = self.sources.to_dict()
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of date_of_birth
        if self.date_of_birth:
            _dict['date_of_birth'] = self.date_of_birth.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mortality
        if self.mortality:
            _dict['mortality'] = self.mortality.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ssn
        if self.ssn:
            _dict['ssn'] = self.ssn.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ssn1
        if self.ssn1:
            _dict['ssn1'] = self.ssn1.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IdentityEnhancedBreakdown from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sources": IdentityEnhancedBreakdownSources.from_dict(obj["sources"]) if obj.get("sources") is not None else None,
            "address": IdentityEnhancedBreakdownAddress.from_dict(obj["address"]) if obj.get("address") is not None else None,
            "date_of_birth": IdentityEnhancedBreakdownDateOfBirth.from_dict(obj["date_of_birth"]) if obj.get("date_of_birth") is not None else None,
            "mortality": IdentityEnhancedBreakdownMortality.from_dict(obj["mortality"]) if obj.get("mortality") is not None else None,
            "ssn": IdrSsnBreakdown.from_dict(obj["ssn"]) if obj.get("ssn") is not None else None,
            "ssn1": IdrSsnBreakdown.from_dict(obj["ssn1"]) if obj.get("ssn1") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


