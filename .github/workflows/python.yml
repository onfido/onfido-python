# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python CI

on:
  push:
    branches:
      - master
      - "release/**"
  pull_request:
    branches:
      - master
      - "release/**"
  workflow_dispatch:
  release:
    types:
      - published
  schedule:
    - cron: "0 14 * * 0"   # Every Sunday, 2 hours after midday

jobs:
  integration-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10", "3.11"]
    env:
      POETRY_CACHE_DIR: ~/.cache/pypoetry-${{ matrix.python-version }}

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Upgrade pip and install poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry
      - name: Poetry cache
        uses: actions/cache@v4
        with:
          path: ${{ env.POETRY_CACHE_DIR }}
          key: ${{ runner.os }}-poetry${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry${{ matrix.python-version }}-
      - name: Install dependencies
        run: |
          poetry install
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          poetry run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          poetry run flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --exclude onfido
      - name: Test with pytest
        if: ${{ matrix.python-version == '3.11' &&
          github.repository_owner == 'onfido' }}
        run: |
          poetry run pytest --show-capture=no
        env:
          ONFIDO_API_TOKEN: ${{ secrets.ONFIDO_API_TOKEN }}
          ONFIDO_SAMPLE_APPLICANT_ID: ${{ secrets.ONFIDO_SAMPLE_APPLICANT_ID }}
          ONFIDO_SAMPLE_VIDEO_ID_1: ${{ secrets.ONFIDO_SAMPLE_VIDEO_ID_1 }}
          ONFIDO_SAMPLE_VIDEO_ID_2: ${{ secrets.ONFIDO_SAMPLE_VIDEO_ID_2 }}
          ONFIDO_SAMPLE_MOTION_ID_1: ${{ secrets.ONFIDO_SAMPLE_MOTION_ID_1 }}
          ONFIDO_SAMPLE_MOTION_ID_2: ${{ secrets.ONFIDO_SAMPLE_MOTION_ID_2 }}

  publish:
    runs-on: ubuntu-latest
    needs: integration-tests
    environment: delivery
    if: github.event_name == 'release'
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_ACTION_ACCESS_TOKEN }}
          ref: master
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - name: Validate release
        uses: onfido/onfido-actions/release-check@main
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build wheel>=0.31.0
      - name: Build package
        run: python -m build
      - name: Publish package
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
      - name: Update and commit CHANGELOG.md
        uses: onfido/onfido-actions/update-changelog@main
